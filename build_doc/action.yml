name: "Generate documentation"
description: "Generates the documentation for the local DPF package"
inputs:
  python-version:
    description: "Python version"
    required: true
    default: "3.8"
  ANSYS_VERSION:
    description: "Ansys release version number in the format 232"
    required: true
  PACKAGE_NAME:
    description: "Package name"
    required: true
  MODULE:
    description: "Module name"
    required: true
    default: post
  dpf-standalone-TOKEN:
    description: "Token for DPF installation"
    required: true
  install_extras:
    description: "Extras to install for the local package"
    required: false
  build_extras:
    description: "Extra paths to build the doc for in the spinx-api command"
    required: false
  generate_pdf:
    description: "Whether to generate the PDF doc"
    required: false
    default: "true"
  debug:
    description: "Output log directly"
    required: false
    default: "false"

runs:
  using: "composite"
  steps:
    - name: "Setup Python"
      uses: actions/setup-python@v4.6.0
      with:
        python-version: ${{ inputs.python-version }}

    - name: "Debug mode"
      shell: bash
      if: inputs.debug == 'false'
      run: |
        echo "DEBUG_SPHINX=&>log_sphinx.txt" >> $GITHUB_ENV
        echo "DEBUG_HTML=&>log_html.txt" >> $GITHUB_ENV
        echo "DEBUG_PDF=&>log_pdf.txt" >> $GITHUB_ENV

    - name: "Install OS packages"
      shell: bash
      run: |
        sudo apt update
        sudo apt install pandoc texlive-latex-extra latexmk

    - name: "Install DPF"
      uses: pyansys/pydpf-actions/install-dpf-server@v2.3
      with:
        dpf-standalone-TOKEN: ${{inputs.dpf-standalone-TOKEN}}
        ANSYS_VERSION : ${{inputs.ANSYS_VERSION}}

    - name: "Install local package"
      uses: pyansys/pydpf-actions/install-package@v2.3

    - name: "Install extras"
      shell: bash
      run: |
        pip install .[${{inputs.install_extras}}]
      if: ${{inputs.install_extras}} != null

    - name: "Test import"
      shell: bash
      working-directory: tests
      run: python -c "from ansys.dpf import ${{inputs.MODULE}}"

    - name: "Setup headless display"
      uses: pyvista/setup-headless-display-action@v1

    - name: "Install documentation requirements"
      shell: bash
      run: |
        pip install -r requirements/requirements_docs.txt

    - name: "Build sphinx doc"
      shell: bash
      run: |
        export SPHINX_APIDOC_OPTIONS=inherited-members
        sphinx-apidoc -o docs/source/api src/ansys ${{inputs.build_extras}} -f --implicit-namespaces --separate --no-headings $DEBUG_SPHINX

    - name: "Build HTML Documentation"
      shell: bash
      working-directory: docs
      run: |
        export TEMP=${{ runner.temp }}
        make clean
        echo "Making html doc..."
        make html $DEBUG_HTML

    - name: "Build PDF Documentation"
      shell: bash
      working-directory: docs
      if: ${{ inputs.generate_pdf == 'true' }}
      run: |
        export TEMP=${{ runner.temp }}
        echo "Making pdf doc..."
        make pdf $DEBUG_PDF

    - name: "Upload Documentation Build log"
      uses: actions/upload-artifact@v3.1.0
      with:
        name: doc-${{inputs.PACKAGE_NAME}}-log
        path: docs/*.txt
      if: inputs.debug == 'false'

    - name: "Zip HTML Documentation"
      uses: vimtor/action-zip@v1.1
      with:
        files: docs/build/html
        dest: HTML-doc-${{inputs.PACKAGE_NAME}}.zip

    - name: "Upload HTML Documentation"
      uses: actions/upload-artifact@v3
      with:
        name: HTML-doc-${{inputs.PACKAGE_NAME}}
        path: HTML-doc-${{inputs.PACKAGE_NAME}}.zip

    - name: "Find PDF Documentation"
      shell: bash
      if: ${{ inputs.generate_pdf == 'true' }}
      id: pdf
      working-directory: docs/build/latex
      run: |
        pattern="PyDPF-*.pdf"
        files=( $pattern )
        echo "PDF_file=${files[0]}" >> $GITHUB_OUTPUT
        echo "Found PDF doc: ${files[0]}"

    - name: "Zip PDF Documentation"
      uses: vimtor/action-zip@v1.1
      if: ${{ inputs.generate_pdf == 'true' }}
      with:
        files: docs/build/latex/${{ steps.pdf.outputs.PDF_file }}
        dest: PDF-doc-${{inputs.PACKAGE_NAME}}.zip

    - name: "Upload PDF Documentation"
      uses: actions/upload-artifact@v3.1.0
      if: inputs.generate_pdf == 'true'
      with:
        name: PDF-doc-${{inputs.PACKAGE_NAME}}
        path: PDF-doc-${{inputs.PACKAGE_NAME}}.zip

    - name: "Kill all servers"
      uses: pyansys/pydpf-actions/kill-dpf-servers@v2.3
      if: always()
