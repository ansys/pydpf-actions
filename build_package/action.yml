name: "Build DPF Package"
description: "Builds the DPF package"
inputs:
  python-version:
    description: "Python version"
    required: true
    default: "3.8"
  ANSYS_VERSION:
    description: "Ansys release version number in the format 221"
    required: true
  PACKAGE_NAME:
    description: "Package name"
    required: true
  MODULE:
    description: "Module name"
    required: true
    default: post
  dpf-standalone-TOKEN:
    description: "Token for DPF installation"
    required: true
  install_extras:
    description: "Extras to install for the local package"
    required: false
  extra-pip-args:
    description: "Args given to pip install command"
    default: ""
    type: string
  wheelhouse:
    description: "Whether to generate a wheelhouse"
    required: true
    default: "false"
  wheel:
    description: "Whether to upload the wheel"
    required: true
    default: "true"

runs:
  using: "composite"
  steps:
    - name: "Setup Python"
      uses: actions/setup-python@v4.3.0
      with:
        python-version: ${{ inputs.python-version }}

    - name: "Install DPF"
      id: set-server-path
      uses: pyansys/pydpf-actions/install-dpf-server@v2.2
      with:
        dpf-standalone-TOKEN: ${{inputs.dpf-standalone-TOKEN}}
        ANSYS_VERSION : ${{inputs.ANSYS_VERSION}}

    - name: "Install local package"
      uses: pyansys/pydpf-actions/install-package@v2.2
      with:
        extra-pip-args: ${{inputs.extra-pip-args}}

    - name: "Install extras"
      shell: bash
      run: |
        pip install .[${{inputs.install_extras}}]
      if: ${{inputs.install_extras}} != null

    - name: "Check licences of packages"
      uses: pyansys/pydpf-actions/check-licenses@v2.2

    - name: "Test import"
      shell: bash
      working-directory: tests
      run: python -c "from ansys.dpf import ${{inputs.MODULE}}"

    - name: "Retrieve package version"
      shell: bash
      run: |
        echo "VERSION=$(python -c "from ansys.dpf.${{inputs.MODULE}} import __version__; print(__version__)")" >> $GITHUB_OUTPUT
        echo "${{inputs.PACKAGE_NAME}} version is: $(python -c "from ansys.dpf.${{inputs.MODULE}} import __version__; print(__version__)")"
      id: version

    - name: "Upload wheel to artifacts"
      if: inputs.wheel == 'true'
      uses: actions/upload-artifact@v3.1.0
      with:
        name: ${{ inputs.PACKAGE_NAME }}-v${{ steps.version.outputs.VERSION }}_wheel
        path: ./dist/*

    - name: "Generate wheelhouse"
      if: inputs.wheelhouse == 'true'
      shell: bash
      run: |
        pip wheel . -w wheelhouse ${{inputs.extra-pip-args}} --f ./dist/

    - name: "Zip wheelhouse"
      if: inputs.wheelhouse == 'true'
      uses: vimtor/action-zip@v1
      with:
        files: wheelhouse
        dest: ${{ inputs.PACKAGE_NAME }}-v${{ steps.version.outputs.VERSION }}-wheelhouse-${{ runner.os }}-${{ inputs.python-version }}.zip

    - name: "Upload wheelhouse to artifacts"
      if: inputs.wheelhouse == 'true'
      uses: actions/upload-artifact@v3.1.0
      with:
        name: ${{ inputs.PACKAGE_NAME }}-v${{ steps.version.outputs.VERSION }}-wheelhouse-${{ runner.os }}-${{ inputs.python-version }}
        path: '*.zip'
        retention-days: 7

    - name: "Kill all servers"
      uses: pyansys/pydpf-actions/kill-dpf-servers@v2.2
